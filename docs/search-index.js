var searchIndex = JSON.parse('{\
"advent_of_code_2021":{"doc":"Advent of Code 2021","t":[17,17,0,5,5,0,0,0,0,0,0,0,0,0,0,0,14,14,14,17,17,5,5,5,4,13,13,13,17,17,4,13,13,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,12,12,12,12,17,17,5,5,5,5,5,5,3,17,17,11,11,11,11,11,11,11,5,5,12,11,5,5,5,5,11,11,11,11,12,17,3,17,3,11,11,11,11,11,11,12,11,11,11,5,5,5,12,11,11,11,11,11,11,12,12,17,17,5,5,5,5,17,17,5,5,5,5,5,17,17,5,5,5,5,17,17,5,5,5,5,5,17,17,5,5,5,5,5,5],"n":["N","SOLUTIONS","challenges","dispatch_challenge","main","utils","day01","day02","day03","day04","day05","day06","day07","day08","day09","day10","display_solution","display_title","solve","INPUT","NAME","part_1","part_2","solve","Command","DirectionError","Down","Forward","INPUT","NAME","ParseMoveError","TypeError","Up","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","from_str","into","into","part_1","part_2","solve","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","INPUT","NAME","filter_by_bit","is_one","majority_bit","part_1","part_2","solve","BingoNumber","INPUT","NAME","borrow","borrow_mut","clone","clone_into","fmt","from","into","is_winner","load_grids","marked","new","part_1","part_2","score","solve","to_owned","try_from","try_into","type_id","value","INPUT","Line","NAME","Point","borrow","borrow","borrow_mut","borrow_mut","from","from","from","from_str","into","into","part_1","part_2","solve","to","try_from","try_from","try_into","try_into","type_id","type_id","x","y","INPUT","NAME","part_1","part_2","simulate_for_days","solve","INPUT","NAME","part_1","part_2","solve","sum_distances","sum_squared_distances","INPUT","NAME","decrypt","part_1","part_2","solve","INPUT","NAME","at_low_points","char_to_digit","part_1","part_2","solve","INPUT","NAME","opening","part_1","part_2","solve","value","load_data"],"q":["advent_of_code_2021","","","","","","advent_of_code_2021::challenges","","","","","","","","","","","","","advent_of_code_2021::challenges::day01","","","","","advent_of_code_2021::challenges::day02","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","advent_of_code_2021::challenges::day02::Command","","","advent_of_code_2021::challenges::day02::ParseMoveError","advent_of_code_2021::challenges::day03","","","","","","","","advent_of_code_2021::challenges::day04","","","","","","","","","","","","","","","","","","","","","","","advent_of_code_2021::challenges::day05","","","","","","","","","","","","","","","","","","","","","","","","","","advent_of_code_2021::challenges::day06","","","","","","advent_of_code_2021::challenges::day07","","","","","","","advent_of_code_2021::challenges::day08","","","","","","advent_of_code_2021::challenges::day09","","","","","","","advent_of_code_2021::challenges::day10","","","","","","","advent_of_code_2021::utils"],"d":["Number of solved challenges","Array of function pointers to solutions","Challenges","Show the answer to the given challenge","Main function","Utilities for loading data","Day 1: Sonar Sweep","Day 2: Dive!","Day 3: Binary Diagnostic","Day 4: Giant Squid","Day 5: Hydrothermal Venture","Day 6: Lanternfish","","","","","Display the solution, with an optional title","Display the challenge title","Declare a solve function that shows results","Input file name","Name of the challenge","Solve part one","Solve part two","Show results of part one and two","Enum for recording commands","","","","Input file name","Name of the challenge","Command parsing error type","","","","","","","","","","","","","","Solve part one","Solve part two","Show results of part one and two","","","","","","","","","","","","Input file name","Name of the challenge","Filter the string vector by majority (or minority) bit","Checks wether the character at position <code>pos</code> is <code>&#39;1&#39;</code>","Find the majority bit at postion <code>pos</code> in the string array","Solve part one","Solve part two","Show results of part one and two","Stores a bingo number and wether or not it is marked","Input file name","Name of the challenge","","","","","","","","Check if a grid has won","Load grids and numbers from a file","","Creates a new Bingo number","Solve part one","Solve part two","Computes a winning grid’s score","Show results of part one and two","","","","","","Input file name","2D line","Name of the challenge","2D point","","","","","","","","","","","Solve part one","Solve part two","Show results of part one and two","","","","","","","","","","Input file name","Name of the challenge","Solve part one","Solve part two","Simulate the lanternfish for <code>days</code> days","Show results of part one and two","Input file name","Name of the challenge","Solve part one","Solve part two","Show results of part one and two","Sum the distances between the crabs and <code>pos</code>","Sum the fuel consumed to get to <code>pos</code>, calculated according …","Input file name","Name of the challenge","Decrypt the randomized connections between digit inputs …","Solve part one","Solve part two","Show results of part one and two","Input file name","Name of the challenge","Calls function <code>f</code> on every low point in the given <code>data</code> …","Converts a character to the corresponding digit. Panics on …","Solve part one","Solve part two","Show results of part one and two","Input file name","Name of the challenge","Return the corresponding opening character","Solve part one","Solve part two","Show results of part one and two","Return the score corresponding to the character","Returns an iterator over sequential data in a file"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,0,0,0,1,2,2,1,2,1,1,1,2,1,2,2,1,0,0,0,1,2,1,2,1,2,1,3,4,5,6,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,0,0,7,7,0,0,0,0,7,7,7,7,7,0,0,0,0,8,9,8,9,8,9,9,9,8,9,0,0,0,9,8,9,8,9,8,9,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,[[["usize",15]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u64",15]],[[],["u64",15]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],["result",4]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[["str",15],["vec",3,["str"]],["bool",15]],["u64",15]],[[["str",15],["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[],["u64",15]],[[],["u64",15]],[[]],null,null,null,[[]],[[]],[[],["bingonumber",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[["str",15]]],null,[[["u32",15]]],[[],["u64",15]],[[],["u64",15]],[[["u32",15]],["u64",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["str",15]],["result",4]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[],["u128",15]],[[],["u128",15]],[[["u64",15]],["u128",15]],[[]],null,null,[[],["u64",15]],[[],["u64",15]],[[]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],null,null,[[["str",15]],["option",4]],[[],["u64",15]],[[],["usize",15]],[[]],null,null,[[]],[[["char",15]],["u64",15]],[[],["u64",15]],[[],["usize",15]],[[]],null,null,[[["char",15]],["char",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[["char",15]],["u64",15]],[[["str",15]]]],"p":[[4,"ParseMoveError"],[4,"Command"],[13,"Forward"],[13,"Down"],[13,"Up"],[13,"TypeError"],[3,"BingoNumber"],[3,"Point"],[3,"Line"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};